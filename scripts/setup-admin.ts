#!/usr/bin/env tsx

// Setup Admin Script - TypeScript Version
// Usage: npx tsx scripts/setup-admin.ts <email>
// Example: npx tsx scripts/setup-admin.ts admin@dumstore.com

import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import { users } from '../src/lib/db/schema.js';
import { eq } from 'drizzle-orm';

async function setupAdmin() {
  const email = process.argv[2];
  
  if (!email) {
    console.error('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•');
    console.log('üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: npx tsx scripts/setup-admin.ts <email>');
    console.log('üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: npx tsx scripts/setup-admin.ts admin@dumstore.com');
    process.exit(1);
  }

  try {
    // Connect to database
    const connectionString = process.env.DATABASE_URL;
    if (!connectionString) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö DATABASE_URL ‡πÉ‡∏ô environment variables');
      process.exit(1);
    }

    console.log('üîå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    const sql = postgres(connectionString);
    const db = drizzle(sql);

    console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ...');

    // Find user by email
    const [user] = await db
      .select()
      .from(users)
      .where(eq(users.email, email))
      .limit(1);

    if (!user) {
      console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${email}`);
      console.log('üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
      process.exit(1);
    }

    if (user.role === 'admin') {
      console.log(`‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${email} ‡πÄ‡∏õ‡πá‡∏ô admin ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
      process.exit(0);
    }

    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï role ‡πÄ‡∏õ‡πá‡∏ô admin...');

    // Update user role to admin
    const [updatedUser] = await db
      .update(users)
      .set({ role: 'admin' })
      .where(eq(users.email, email))
      .returning({
        id: users.id,
        email: users.email,
        name: users.name,
        role: users.role,
      });

    console.log('üéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï admin ‡πÅ‡∏•‡πâ‡∏ß');
    console.log('üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:');
    console.log(`   üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${updatedUser.email}`);
    console.log(`   üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${updatedUser.name}`);
    console.log(`   üëë ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ${updatedUser.role}`);

    await sql.end();

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error instanceof Error ? error.message : error);
    process.exit(1);
  }
}

setupAdmin(); 